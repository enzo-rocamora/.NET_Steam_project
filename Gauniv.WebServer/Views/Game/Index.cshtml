@model IEnumerable<Gauniv.WebServer.Data.Game>
@using Gauniv.WebServer.Data
@{
    ViewData["Title"] = "Games";
    var categories = ViewData["Categories"] as IEnumerable<Category>;
    var selectedCategories = ViewData["SelectedCategories"] as int[];
    var ownedGames = ViewData["OwnedGames"] as List<int> ?? new List<int>();
    var isAdmin = ViewData["IsAdmin"] as bool? ?? false;
    var showOwnedOnly = ViewData["ShowOwnedOnly"] as bool? ?? false;
    var userId = User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
}

<div class="container">
    <h1>Games</h1>

    @if (TempData["Message"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["Message"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["Error"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row mb-4">
        <div class="col">
            @if (isAdmin)
            {
                <a asp-action="Form" class="btn btn-primary">Create New Game</a>
            }
        </div>
    </div>

    <!-- Filters -->
    <div class="card mb-4">
        <div class="card-body">
            <form asp-action="Index" method="get" id="filterForm">
                <input type="hidden" name="sortBy" value="@ViewData["CurrentSort"]" id="sortByInput" />

                <div class="row g-3">
                    <!-- Category Filter -->
                    <div class="col-md-6">
                        <label class="form-label">Filter by Categories</label>
                        <div class="input-group mb-3">
                            <input type="text" id="categoryInput" class="form-control" placeholder="Type to search categories..." />
                            <button type="button" class="btn btn-outline-secondary" id="addCategory">Add</button>
                        </div>

                        <!-- Selected Categories Display -->
                        <div id="selectedCategories" class="mb-3">
                            @foreach (var categoryId in selectedCategories ?? Array.Empty<int>())
                            {
                                var category = categories.FirstOrDefault(c => c.Id == categoryId);
                                if (category != null)
                                {
                                    <span class="badge bg-primary me-2 mb-2 category-badge">
                                        @category.Name
                                        <button type="button" class="btn-close btn-close-white" data-category-id="@category.Id" aria-label="Remove"></button>
                                        <input type="hidden" name="categories" value="@category.Id" />
                                    </span>
                                }
                            }
                        </div>
                        <div id="categoryError" class="text-danger"></div>
                    </div>

                    @if (User?.Identity?.IsAuthenticated == true)
                    {
                        <!-- Owned Games Filter -->
                        <div class="col-md-6">
                            <label class="form-label">Game Ownership</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showOwnedOnly"
                                       name="showOwnedOnly" value="true" @(showOwnedOnly ? "checked" : "")>
                                <label class="form-check-label" for="showOwnedOnly">
                                    Show only owned games
                                </label>
                            </div>
                        </div>
                    }
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-primary">Apply Filters</button>
                    <a asp-action="Index" class="btn btn-outline-secondary">Clear Filters</a>
                </div>
            </form>
        </div>
    </div>

    <!-- Games List -->
    <div class="table-responsive">
        <table class="table">
            <thead>
                <tr>
                    <th>
                        <a href="#" class="text-dark text-decoration-none sort-link" data-sort="@ViewData["NameSortParam"]">
                            @Html.DisplayNameFor(model => model.Title)
                            @if (ViewData["CurrentSort"] as string == "name")
                            {
                                <i class="bi bi-arrow-up"></i>
                            }
                            else if (ViewData["CurrentSort"] as string == "name_desc")
                            {
                                <i class="bi bi-arrow-down"></i>
                            }
                        </a>
                    </th>
                    <th>
                        <a href="#" class="text-dark text-decoration-none sort-link" data-sort="@ViewData["PriceSortParam"]">
                            @Html.DisplayNameFor(model => model.Price)
                            @if (ViewData["CurrentSort"] as string == "price")
                            {
                                <i class="bi bi-arrow-up"></i>
                            }
                            else if (ViewData["CurrentSort"] as string == "price_desc")
                            {
                                <i class="bi bi-arrow-down"></i>
                            }
                        </a>
                    </th>
                    <th>Categories</th>
                    <th>
                        <a href="#" class="text-dark text-decoration-none sort-link" data-sort="@ViewData["DateSortParam"]">
                            Created
                            @if (ViewData["CurrentSort"] as string == "date")
                            {
                                <i class="bi bi-arrow-down"></i>
                            }
                        </a>
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    bool isOwned = item.Owners != null && item.Owners.Any(o => o.Id == userId);
                    <tr class="@(isOwned ? "table-success" : "")">
                        <td>@Html.DisplayFor(modelItem => item.Title)</td>
                        <td>@item.Price.ToString("C")</td>
                        <td>
                            @if (item.Categories.Any())
                            {
                                @string.Join(", ", item.Categories.Select(c => c.Name))
                            }
                            else
                            {
                                <span class="text-muted">No categories</span>
                            }
                        </td>
                        <td>@item.CreatedAt.ToString("yyyy-MM-dd")</td>
                        <td>
                            @if (isAdmin)
                            {
                                <a asp-action="Form" asp-route-id="@item.Id" class="btn btn-sm btn-primary">Edit</a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-danger">Delete</a>
                            }
                            @if (User?.Identity?.IsAuthenticated == true && !isOwned)
                            {
                                <form asp-action="Purchase" method="post" class="d-inline">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <button type="submit" class="btn btn-sm btn-success">Purchase</button>
                                </form>
                            }
                            else if (isOwned)
                            {
                                <span class="badge bg-success">Owned</span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.min.js"></script>
    <link rel="stylesheet" href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">

    <script>
        $(document).ready(function() {
            const categories = @Html.Raw(Json.Serialize(categories?.Select(c => new { id = c.Id, label = c.Name })));

            // Initialize autocomplete
            $("#categoryInput").autocomplete({
                source: categories.map(c => c.label),
                minLength: 1
            });

            // Function to add a category badge
            function addCategory() {
                const input = $("#categoryInput");
                const categoryName = input.val().trim();

                if (!categoryName) return;

                const category = categories.find(c => c.label.toLowerCase() === categoryName.toLowerCase());

                if (!category) {
                    $("#categoryError").text("This category doesn't exist");
                    return;
                }

                if ($(`input[value="${category.id}"]`).length > 0) {
                    $("#categoryError").text("This category is already selected");
                    return;
                }

                $("#categoryError").text("");

                const badge = $(`
                    <span class="badge bg-primary me-2 mb-2 category-badge">
                        ${category.label}
                        <button type="button" class="btn-close btn-close-white" data-category-id="${category.id}" aria-label="Remove"></button>
                        <input type="hidden" name="categories" value="${category.id}" />
                    </span>
                `);

                $("#selectedCategories").append(badge);
                input.val("");

                // Auto-submit the form when a category is added
                $("#filterForm").submit();
            }

            // Add category on button click
            $("#addCategory").click(addCategory);

            // Add category on Enter key
            $("#categoryInput").keypress(function(e) {
                if (e.which === 13) {
                    e.preventDefault();
                    addCategory();
                }
            });

            // Remove category badge
            $(document).on("click", ".btn-close", function() {
                $(this).closest(".category-badge").remove();
                // Auto-submit the form when a category is removed
                $("#filterForm").submit();
            });

            // Handle sorting
            $(".sort-link").click(function(e) {
                e.preventDefault();
                const sortBy = $(this).data("sort");
                $("#sortByInput").val(sortBy);
                $("#filterForm").submit();
            });

            // Auto-submit on owned games filter change
            $("#showOwnedOnly").change(function() {
                $("#filterForm").submit();
            });
        });
    </script>

    <style>
        .ui-autocomplete {
            max-height: 200px;
            overflow-y: auto;
            overflow-x: hidden;
            z-index: 1050;
        }

        .category-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.5em 0.7em;
        }

            .category-badge .btn-close {
                width: 0.5em;
                height: 0.5em;
                margin-left: 0.5em;
                cursor: pointer;
            }

        tr.table-success {
            --bs-table-bg: rgba(25, 135, 84, 0.1);
        }
    </style>
}